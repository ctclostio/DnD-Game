# syntax=docker/dockerfile:1

# ========================================
# Stage 1: Dependencies
# ========================================
FROM node:20-alpine AS deps

# Install build dependencies
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy package files only for better caching
COPY package.json package-lock.json ./

# Install dependencies based on lockfile
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# ========================================
# Stage 2: Builder
# ========================================
FROM node:20-alpine AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy package files
COPY --chmod=644 package.json package-lock.json ./

# Copy only necessary source code as read-only
COPY --chmod=444 public ./public
COPY --chmod=444 src ./src
COPY --chmod=644 tsconfig.json ./
COPY --chmod=644 .eslintrc.js ./

# Change ownership to build user
RUN chown -R builduser:buildgroup /app

# Set build arguments for optimization
ARG NODE_ENV=production
ARG REACT_APP_API_URL
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Build the application with optimizations
ENV NODE_ENV=${NODE_ENV}
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false

# Switch to non-root user for build
USER builduser

RUN npm run build

# Remove unnecessary files
RUN rm -rf node_modules

# ========================================
# Stage 3: Security Scanner
# ========================================
FROM aquasec/trivy:0.48.0 AS scanner

WORKDIR /app

# Copy built files for scanning
COPY --from=builder /app/build ./build

# Scan for vulnerabilities
RUN trivy filesystem --exit-code 0 --no-progress /app/build

# ========================================
# Stage 4: Production Image
# ========================================
FROM nginx:alpine-slim AS production

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Copy custom nginx config as read-only
COPY --chmod=444 nginx/nginx.conf /etc/nginx/nginx.conf
COPY --chmod=444 nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy security headers config as read-only
COPY --chmod=444 nginx/security-headers.conf /etc/nginx/conf.d/security-headers.conf

# Copy built application as read-only
COPY --from=builder --chmod=444 /app/build /usr/share/nginx/html

# Copy runtime configuration script with execute permissions
COPY --chmod=755 docker/runtime-env.sh /docker-entrypoint.d/40-runtime-env.sh

# Set correct permissions and make files read-only
RUN chown -R appuser:appgroup /usr/share/nginx/html && \
    chown -R appuser:appgroup /var/cache/nginx && \
    chown -R appuser:appgroup /var/log/nginx && \
    chown -R appuser:appgroup /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R appuser:appgroup /var/run/nginx.pid && \
    chmod -R 444 /usr/share/nginx/html && \
    chmod 444 /etc/nginx/conf.d/*.conf

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Add labels for metadata
LABEL org.opencontainers.image.title="D&D Game Frontend" \
      org.opencontainers.image.description="Frontend application for D&D Game" \
      org.opencontainers.image.version="${VERSION:-latest}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# ========================================
# Stage 5: Development
# ========================================
FROM node:20-alpine AS development

# Install development tools
RUN apk add --no-cache git

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install all dependencies including devDependencies
RUN npm install

# Copy only necessary source code
# In development, code is typically volume-mounted
# Development needs write permissions for hot reloading
COPY public ./public
COPY src ./src
COPY tsconfig.json ./
COPY .eslintrc.js ./

# Set ownership for development
RUN chown -R devuser:devgroup /app

# Expose ports
EXPOSE 3000

# Environment for development
ENV NODE_ENV=development
ENV CHOKIDAR_USEPOLLING=true

# Start development server
CMD ["npm", "start"]

# ========================================
# Stage 6: Test Runner
# ========================================
FROM node:20-alpine AS test

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy package files and source as read-only
COPY --chmod=644 package.json package-lock.json ./
COPY --chmod=444 public ./public
COPY --chmod=444 src ./src
COPY --chmod=644 tsconfig.json ./
COPY --chmod=644 jest.config.js ./

# Change ownership for test execution
RUN chown -R testuser:testgroup /app

# Switch to non-root user
USER testuser

# Run tests
RUN npm run test -- --coverage --watchAll=false

# ========================================
# Stage 7: Static Analyzer
# ========================================
FROM node:20-alpine AS analyzer

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy package files and source as read-only
COPY --chmod=644 package.json package-lock.json ./
COPY --chmod=444 public ./public
COPY --chmod=444 src ./src
COPY --chmod=644 tsconfig.json ./
COPY --chmod=644 .eslintrc.js ./

# Change ownership for analysis
RUN chown -R analyzeruser:analyzergroup /app

# Switch to non-root user
USER analyzeruser

# Run linting and type checking
RUN npm run lint && \
    npm run type-check || true