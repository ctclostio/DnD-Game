apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: dnd-game
  labels:
    app.kubernetes.io/name: dnd-game
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: dnd-game
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dnd-game
        app.kubernetes.io/component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: dnd-game-backend
      automountServiceAccountToken: false
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for postgres; sleep 2; done']
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
            ephemeral-storage: "50Mi"
          limits:
            memory: "64Mi"
            cpu: "100m"
            ephemeral-storage: "100Mi"
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis-service 6379; do echo waiting for redis; sleep 2; done']
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
            ephemeral-storage: "50Mi"
          limits:
            memory: "64Mi"
            cpu: "100m"
            ephemeral-storage: "100Mi"
      - name: run-migrations
        image: dnd-backend:1.0.0 # TODO: Update version as needed
        command: ["/app/server", "-migrate"]
        envFrom:
        - configMapRef:
            name: dnd-game-config
        - secretRef:
            name: dnd-game-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "100Mi"
          limits:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "200Mi"
      containers:
      - name: backend
        image: dnd-backend:1.0.0 # TODO: Update version as needed
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: dnd-game-config
        - secretRef:
            name: dnd-game-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "512Mi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /app/data
          readOnly: true
      volumes:
      - name: data
        configMap:
          name: game-data
          optional: true

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: dnd-game
  labels:
    app.kubernetes.io/name: dnd-game
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: dnd-game
    app.kubernetes.io/component: backend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dnd-game-backend
  namespace: dnd-game
  labels:
    app.kubernetes.io/name: dnd-game
    app.kubernetes.io/component: backend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: dnd-game
  labels:
    app.kubernetes.io/name: dnd-game
    app.kubernetes.io/component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: dnd-game
  labels:
    app.kubernetes.io/name: dnd-game
    app.kubernetes.io/component: backend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: dnd-game
      app.kubernetes.io/component: backend