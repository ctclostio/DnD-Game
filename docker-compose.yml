version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=dndgame
      - DB_PASSWORD=dndgamepass
      - DB_NAME=dndgame
      - DB_SSLMODE=disable
    volumes:
      - ./backend:/app/backend
      - ./data:/app/data
    networks:
      - dnd-network
    depends_on:
      - postgres
      - redis

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    networks:
      - dnd-network
    depends_on:
      - backend

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=dndgame
      - POSTGRES_PASSWORD=dndgamepass
      - POSTGRES_DB=dndgame
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dnd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dndgame"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dnd-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/usr/share/nginx/html
    networks:
      - dnd-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

networks:
  dnd-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: