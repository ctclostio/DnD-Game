name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      
      - name: Run golangci-lint
        working-directory: ./backend
        run: golangci-lint run --timeout 5m

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: backend-lint
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install dependencies
        working-directory: ./backend
        run: go mod download
      
      - name: Run migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        run: |
          go run cmd/migrate/main.go up
      
      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
          JWT_SECRET: test-secret-key
          ENVIRONMENT: test
        run: |
          go test -v -race -short -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
      
      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
          JWT_SECRET: test-secret-key
          ENVIRONMENT: test
        run: |
          go test -v -race -run Integration ./...
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage.html
      
      - name: Check test coverage
        working-directory: ./backend
        run: |
          echo "Checking test coverage..."
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $coverage%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Coverage is below 80% threshold"
            exit 1
          fi

  frontend-lint:
    name: Frontend Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
      
      - name: Check TypeScript
        working-directory: ./frontend
        run: npm run type-check

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: frontend-lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run unit tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage/lcov-report
      
      - name: Check test coverage
        working-directory: ./frontend
        run: |
          echo "Checking test coverage..."
          npm run test:coverage:check

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: go mod download
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Build backend
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
          JWT_SECRET: test-secret-key
        run: go build -o server cmd/server/main.go
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
          JWT_SECRET: test-secret-key
          PORT: 8080
        run: |
          ./server &
          sleep 5
      
      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        working-directory: ./frontend
        env:
          BACKEND_URL: http://localhost:8080
        run: npm run test:e2e
      
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: frontend/test-results

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./backend/...'
      
      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'gosec-results.sarif'

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dnd-game-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/dnd-game-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dnd-game-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/dnd-game-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-scan]
    if: success()
    steps:
      - name: Send success notification
        run: |
          echo "All tests passed successfully!"
          # Add Slack/Discord notification here

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-scan]
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          echo "Tests failed! Check the logs."
          # Add Slack/Discord notification here