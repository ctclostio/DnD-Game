package services

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"github.com/your-username/dnd-game/backend/internal/models"
)

// SimpleMockDiceRollRepository is a mock implementation of DiceRollRepository
type SimpleMockDiceRollRepository struct {
	mock.Mock
}

func (m *SimpleMockDiceRollRepository) Create(ctx context.Context, roll *models.DiceRoll) error {
	args := m.Called(ctx, roll)
	return args.Error(0)
}

func (m *SimpleMockDiceRollRepository) GetByID(ctx context.Context, id string) (*models.DiceRoll, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*models.DiceRoll), args.Error(1)
}

func (m *SimpleMockDiceRollRepository) GetByGameSession(ctx context.Context, sessionID string, offset, limit int) ([]*models.DiceRoll, error) {
	args := m.Called(ctx, sessionID, offset, limit)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*models.DiceRoll), args.Error(1)
}

func (m *SimpleMockDiceRollRepository) GetByUser(ctx context.Context, userID string, offset, limit int) ([]*models.DiceRoll, error) {
	args := m.Called(ctx, userID, offset, limit)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*models.DiceRoll), args.Error(1)
}

func (m *SimpleMockDiceRollRepository) GetByGameSessionAndUser(ctx context.Context, sessionID, userID string, offset, limit int) ([]*models.DiceRoll, error) {
	args := m.Called(ctx, sessionID, userID, offset, limit)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*models.DiceRoll), args.Error(1)
}

func (m *SimpleMockDiceRollRepository) Delete(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func TestDiceRollService_Simple(t *testing.T) {
	ctx := context.Background()

	t.Run("successful d20 roll", func(t *testing.T) {
		mockRepo := new(SimpleMockDiceRollRepository)
		
		// Expect Create to be called with any context and a dice roll
		mockRepo.On("Create", mock.Anything, mock.MatchedBy(func(r *models.DiceRoll) bool {
			// Just check that the basic fields are set correctly
			return r.GameSessionID == "session-123" &&
				r.UserID == "user-123" &&
				r.RollNotation == "1d20" &&
				r.Purpose == "Attack roll" &&
				r.Count == 1 &&
				r.DiceType == "d20" &&
				r.Modifier == 0 &&
				len(r.Results) == 1 &&
				r.Results[0] >= 1 && r.Results[0] <= 20 &&
				r.Total >= 1 && r.Total <= 20
		})).Return(nil)

		service := NewDiceRollService(mockRepo)
		
		roll := &models.DiceRoll{
			GameSessionID: "session-123",
			UserID:        "user-123",
			RollNotation:  "1d20",
			Purpose:       "Attack roll",
		}
		
		err := service.RollDice(ctx, roll)
		require.NoError(t, err)
		
		// Validate the roll was filled in correctly
		assert.Equal(t, 1, roll.Count)
		assert.Equal(t, "d20", roll.DiceType)
		assert.Equal(t, 0, roll.Modifier)
		assert.Len(t, roll.Results, 1)
		assert.GreaterOrEqual(t, roll.Results[0], 1)
		assert.LessOrEqual(t, roll.Results[0], 20)
		assert.Equal(t, roll.Results[0], roll.Total)
		
		mockRepo.AssertExpectations(t)
	})

	t.Run("roll with modifier", func(t *testing.T) {
		mockRepo := new(SimpleMockDiceRollRepository)
		
		mockRepo.On("Create", mock.Anything, mock.Anything).Return(nil)

		service := NewDiceRollService(mockRepo)
		
		roll := &models.DiceRoll{
			GameSessionID: "session-123",
			UserID:        "user-123",
			RollNotation:  "2d6+3",
			Purpose:       "Damage roll",
		}
		
		err := service.RollDice(ctx, roll)
		require.NoError(t, err)
		
		// Validate the roll
		assert.Equal(t, 2, roll.Count)
		assert.Equal(t, "d6", roll.DiceType)
		assert.Equal(t, 3, roll.Modifier)
		assert.Len(t, roll.Results, 2)
		
		// Check results are in valid range
		sum := 0
		for _, r := range roll.Results {
			assert.GreaterOrEqual(t, r, 1)
			assert.LessOrEqual(t, r, 6)
			sum += r
		}
		assert.Equal(t, sum+3, roll.Total)
		
		mockRepo.AssertExpectations(t)
	})

	t.Run("missing game session ID", func(t *testing.T) {
		mockRepo := new(SimpleMockDiceRollRepository)
		service := NewDiceRollService(mockRepo)
		
		roll := &models.DiceRoll{
			UserID:       "user-123",
			RollNotation: "1d20",
		}
		
		err := service.RollDice(ctx, roll)
		require.Error(t, err)
		assert.Contains(t, err.Error(), "game session ID is required")
	})

	t.Run("invalid roll notation", func(t *testing.T) {
		mockRepo := new(SimpleMockDiceRollRepository)
		service := NewDiceRollService(mockRepo)
		
		roll := &models.DiceRoll{
			GameSessionID: "session-123",
			UserID:        "user-123",
			RollNotation:  "not a valid roll",
		}
		
		err := service.RollDice(ctx, roll)
		require.Error(t, err)
		assert.Contains(t, err.Error(), "invalid roll notation")
	})
}