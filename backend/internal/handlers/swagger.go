package handlers

import (
	"fmt"
	"net/http"

	"github.com/ctclostio/DnD-Game/backend/internal/constants"
)

// SwaggerUI serves the Swagger UI HTML page
func SwaggerUI(w http.ResponseWriter, _ *http.Request) {
	html := `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>D&D Game API - Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.18.3/swagger-ui.css">
    <style>
        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }
        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.18.3/swagger-ui-bundle.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.18.3/swagger-ui-standalone-preset.js"></script>
    <script>
    window.onload = function() {
        const ui = SwaggerUIBundle({
            url: "/api/v1/swagger.json",
            dom_id: '#swagger-ui',
            deepLinking: true,
            presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIStandalonePreset
            ],
            plugins: [
                SwaggerUIBundle.plugins.DownloadUrl
            ],
            layout: "StandaloneLayout"
        });
        window.ui = ui;
    };
    </script>
</body>
</html>`

	w.Header().Set(constants.ContentType, "text/html; charset=utf-8")
	if _, err := fmt.Fprint(w, html); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

// SwaggerJSON returns the OpenAPI specification
func (h *Handlers) SwaggerJSON(w http.ResponseWriter, _ *http.Request) {
	// This would be generated by swaggo in a real implementation
	spec := `{
    "swagger": "2.0",
    "info": {
        "title": "D&D Game API",
        "description": "API for the D&D online game platform with real-time multiplayer support",
        "version": "1.0.0",
        "contact": {
            "name": "API Support",
            "email": "support@dndgame.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "schemes": ["http", "https"],
    "consumes": [constants.ApplicationJSON],
    "produces": [constants.ApplicationJSON],
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "Type 'Bearer' followed by a space and JWT token"
        }
    },
    "paths": {
        "/health": {
            "get": {
                "tags": ["health"],
                "summary": "Basic health check",
                "description": "Check if the service is running",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/HealthResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "tags": ["auth"],
                "summary": "Register a new user",
                "description": "Create a new user account",
                "parameters": [{
                    "in": "body",
                    "name": "request",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/RegisterRequest"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    }
                }
            }
        },
        "/characters": {
            "get": {
                "tags": ["characters"],
                "summary": "List all characters",
                "security": [{"Bearer": []}],
                "responses": {
                    "200": {
                        "description": "List of characters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Character"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "HealthResponse": {
            "type": "object",
            "properties": {
                "status": {"type": "string"},
                "timestamp": {"type": "string"},
                "version": {"type": "string"},
                "uptime": {"type": "string"},
                "service": {"type": "string"}
            }
        },
        "RegisterRequest": {
            "type": "object",
            "required": ["username", "email", "password"],
            "properties": {
                "username": {"type": "string"},
                "email": {"type": "string"},
                "password": {"type": "string"}
            }
        },
        "AuthResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "accessToken": {"type": "string"},
                "refreshToken": {"type": "string"}
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {"type": "string"},
                "username": {"type": "string"},
                "email": {"type": "string"},
                "role": {"type": "string"}
            }
        },
        "Character": {
            "type": "object",
            "properties": {
                "id": {"type": "string"},
                "name": {"type": "string"},
                "race": {"type": "string"},
                "class": {"type": "string"},
                "level": {"type": "integer"},
                "hitPoints": {"type": "integer"},
                "maxHitPoints": {"type": "integer"}
            }
        }
    }
}`

	w.Header().Set(constants.ContentType, constants.ApplicationJSON)
	if _, err := fmt.Fprint(w, spec); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}
