# syntax=docker/dockerfile:1

# ========================================
# Stage 1: Download dependencies
# ========================================
FROM golang:1.21-alpine AS deps

# Install certificates for HTTPS
RUN apk add --no-cache ca-certificates git

WORKDIR /app

# Copy only go.mod and go.sum for better cache utilization
COPY go.mod go.sum ./

# Download dependencies
# This layer will be cached unless go.mod or go.sum change
RUN go mod download && go mod verify

# ========================================
# Stage 2: Build the application
# ========================================
FROM golang:1.21-alpine AS builder

# Install build tools
RUN apk add --no-cache git make

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=deps /go/pkg /go/pkg

# Copy go mod files
COPY go.mod go.sum ./

# Copy source code
COPY . .

# Build the application with optimizations
WORKDIR /app/backend/cmd/server
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.Version=${VERSION:-dev} -X main.BuildTime=$(date -u +%Y%m%d.%H%M%S)" \
    -a -installsuffix cgo \
    -o server .

# ========================================
# Stage 3: Security scanner
# ========================================
FROM aquasec/trivy:0.48.0 AS scanner

WORKDIR /app

# Copy the binary for scanning
COPY --from=builder /app/backend/cmd/server/server .

# Run vulnerability scan
RUN trivy filesystem --exit-code 0 --no-progress /app/server

# ========================================
# Stage 4: Final minimal image
# ========================================
FROM scratch AS final

# Import ca-certificates from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Import user and group files for security
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Create app directory
WORKDIR /app

# Copy the binary from builder with execute permissions only
COPY --from=builder --chmod=555 /app/backend/cmd/server/server .

# Copy static data if needed with read-only permissions
COPY --from=builder --chmod=444 /app/data ./data

# Use non-root user
USER nobody:nobody

# Expose port (documentation only)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/app/server", "-health-check"]

# Run the binary
ENTRYPOINT ["/app/server"]

# ========================================
# Development stage with debugging tools
# ========================================
FROM golang:1.21-alpine AS development

# Install development tools
RUN apk add --no-cache bash curl git make vim

# Install air for hot reload
RUN go install github.com/cosmtrek/air@latest

# Install dlv for debugging
RUN go install github.com/go-delve/delve/cmd/dlv@latest

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code (will be mounted in development)
COPY . .

# Expose ports
EXPOSE 8080 2345

# Run with air for hot reload
CMD ["air", "-c", ".air.toml"]

# ========================================
# Production-debug stage (with shell)
# ========================================
FROM alpine:3.19 AS production-debug

# Install runtime dependencies and debug tools
RUN apk add --no-cache \
    bind-tools \
    ca-certificates \
    curl \
    htop \
    net-tools \
    procps \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# Copy the binary from builder
COPY --from=builder /app/backend/cmd/server/server .

# Copy static data
COPY --from=builder /app/data ./data

# Copy healthcheck script
COPY --from=builder --chmod=755 /app/backend/scripts/healthcheck.sh /usr/local/bin/healthcheck.sh

# Change ownership
RUN chown -R appuser:appgroup /app

# Use non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/usr/local/bin/healthcheck.sh"]

# Run the binary
CMD ["./server"]