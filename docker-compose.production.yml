version: '3.8'

# Production Docker Compose Configuration
# IMPORTANT: This file is for production deployments only
# Uses pre-built production images with correct stages

services:
  frontend:
    image: dnd-frontend:prod
    container_name: dnd-frontend-prod
    restart: unless-stopped
    ports:
      - "80:3000"
    environment:
      # Runtime environment variables (injected via runtime-env.sh)
      - REACT_APP_API_URL=${REACT_APP_API_URL:-https://api.yourdomain.com}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-wss://api.yourdomain.com}
    networks:
      - dnd-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  backend:
    image: dnd-backend:prod
    container_name: dnd-backend-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # IMPORTANT: All these must be set for production
      - ENV=production
      - PORT=8080
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-dndgame}
      - DB_SSLMODE=require  # Always require SSL in production
      - JWT_SECRET=${JWT_SECRET}  # Must be 64+ characters
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AI_PROVIDER=${AI_PROVIDER:-openai}  # Never "mock" in production
      - AI_API_KEY=${AI_API_KEY}
      - AI_MODEL=${AI_MODEL:-gpt-4}
    depends_on:
      - postgres
      - redis
    networks:
      - dnd-network
    healthcheck:
      test: ["CMD", "/app/server", "-health-check"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    container_name: dnd-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-dndgame}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - dnd-network
    ports:
      - "5432:5432"  # Consider using internal network only
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dnd-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
    networks:
      - dnd-network
    ports:
      - "6379:6379"  # Consider using internal network only
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  dnd-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local